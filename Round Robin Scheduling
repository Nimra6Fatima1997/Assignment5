# first take number of processors from user ,their arrival and burst time
# then take quantum _time,i/o time,i/o waiting time
# first load the one processor in ready queue then run that process
# if after every 1 time check the new proess if come,then load in ready queue
# after new process check ,then check witing queue if there is process then load in ready queue at last load the running process in ready queue if their is remaning burst time
# if process is even then after i/o time send that in waiting queue and remain their till tme+i/o waiting_time
# then continue process until ready queue is not empty

# actually there are 4 cases
# --> process is not even and burst time is greater then Quantum time
# --> process is not even and burst time is not greater then Quantum time
# --> process is even and burst time is greater then i/o time
# --> process is even and burst time is not greater then i/o time

size = input("Enter a number of processors  : ")                              # take number of processors from user

if size != 0:                                                                   # if number of processors is  not zero then  do work else print message
    if size < 6:
        i = 0
        wait_front = 0
        wait_rear = 0

        ready_front = 0
        ready_rear = 0

        burst = 0
        Quantum_time = 0
        io_time_slice = 0
        io_waiting_time = 0
        time = 0

        running_processor = 0
        running_process_name=0


        average_waiting_time = 0.0
        average_turnaround_time = 0.0

        total_waiting_time = 0
        total_turnaround_time = 0
        Turnaround_time = [0]*size                               # declare the turnaround_time array
        waiting_time = [0]*size                                  # declare the waiting_time array

        ready_queue = [0]*100
        ready_queue_process_name=[0]*100

        waiting_queue = [0]*100
        waiting_queue_process_name = [0]*100
        waiting_queue_arrival_time = [0]*100

        arrival_time = [0]*size                                        # declare the arrival_time array
        burst_time = [0]*size                                          # declare the burst_time array
        burst_temp_array = [0]*size
        process_name = [0]*size                                       # declare the process_name array

        waiting_time[0] = 0

        for loop1 in range(size):                                           # take arrival and burst time from user

            process_name[i] = i
            print "process ", i

            arrival_time[i] = input("Enter arrival time : ")
            burst_time[i] = input("Enter burst time : ")
            burst_temp_array[i] = burst_time[i]
            i = i+1

        Quantum_time = input("Enter Quantum_time : ")
        io_time_slice = input("Enter i/o_time  for even processors: ")
        io_waiting_time = input("Enter i/o Waiting_time  for even processors: ")

        for loop2 in range(size - 1):                                                # sorted the processors with respect to arrival_time
            if arrival_time[loop2] > arrival_time[loop2 + 1]:
                temp = arrival_time[loop2]
                temp2 = process_name[loop2]
                temp1 = burst_time[loop2]
                burst_time[loop2] = burst_time[loop2 + 1]
                arrival_time[loop2] = arrival_time[loop2 + 1]
                process_name[loop2] = process_name[loop2 + 1]
                burst_time[loop2 + 1] = temp1
                arrival_time[loop2 + 1] = temp
                process_name[loop2 + 1] = temp2

        ready_queue[ready_rear] = burst_time[burst]                                   # first put one processor in ready queue
        ready_queue_process_name[ready_rear]=process_name[burst]
        burst = burst + 1

        ready_front=ready_rear
        ready_rear = ready_rear + 1

        while ready_rear!=ready_front:                                                 # while ready queue is not empty

            running_processor=ready_queue[ready_front]
            running_process_name = ready_queue_process_name[ready_front]
            ready_front=ready_front+1

            if running_process_name/2!=0:                                              #if process is not even

# case 1: process is not even and burst time is greater then Quantum time

                if running_processor >Quantum_time:                                         # if burst time is greater then Quantum time
                    running_processor=running_processor-Quantum_time

                    for time in range(time+Quantum_time):
                        time=time+1


                        if burst < size and  arrival_time[burst]==time:
                            ready_queue[ready_rear] = burst_time[burst]
                            ready_queue_process_name[ready_rear] = process_name[burst]
                            ready_rear = ready_rear + 1
                            burst = burst + 1

                        if waiting_queue_arrival_time[wait_rear]==time:                                 # secondly check the waiting queue
                            ready_queue[ready_rear] = waiting_queue[wait_rear]
                            ready_queue_process_name[ready_rear]=waiting_queue_process_name[wait_rear]
                            wait_rear = wait_rear + 1
                            ready_rear = ready_rear + 1

                    ready_queue[ready_rear] = running_processor                                             # then load the process from running queue to ready queue
                    ready_queue_process_name[ready_rear]=running_process_name
                    print  "[", running_process_name, "]", running_processor
                    ready_rear = ready_rear + 1

# case 2: process is not even and burst time is not greater then Quantum time

                else:
                    if running_processor < Quantum_time and running_processor > 0:                                                     # if burst time is less then quantum time

                        running_processor = running_processor - running_processor
                        waiting_time[running_process_name] =time-arrival_time[running_process_name]

                        for time in range(time + running_processor):
                            time = time + 1

                            if burst < size and arrival_time[burst] == time:                                            # first check the new process
                                ready_queue[ready_rear] = burst_time[burst]
                                ready_queue_process_name[ready_rear] = process_name[burst]
                                ready_rear = ready_rear + 1
                                burst = burst + 1

                            if waiting_queue_arrival_time[wait_rear] == time:                             # secondly check the waiting queue
                                ready_queue[ready_rear] = waiting_queue[wait_rear]
                                ready_queue_process_name[ready_rear] = waiting_queue_process_name[wait_rear]
                                wait_rear = wait_rear + 1
                                ready_rear = ready_rear + 1

                        print "[", running_process_name, "]", running_processor
                        Turnaround_time[running_process_name] = time - arrival_time[running_process_name]

            else:                                                                                                   # if process is even

# case 3:  process is even and burst time is greater then i/o time

                if running_processor < io_time_slice:                                                                           #if burst time is less then i/o time
                    running_processor = running_processor - running_processor
                    for time in range(time + running_processor):
                        time = time + 1

                        if burst < size and arrival_time[burst] == time:                                                          # first check the new process
                            ready_queue[ready_rear] = burst_time[burst]
                            ready_queue_process_name[ready_rear] = process_name[burst]
                            ready_rear = ready_rear + 1
                            burst = burst + 1

                        print wait_rear
                        if waiting_queue_arrival_time[wait_rear] == time:                                        # secondly check the waiting queue
                            ready_queue[ready_rear] = waiting_queue[wait_rear]
                            ready_queue_process_name[ready_rear] = waiting_queue_process_name[wait_rear]
                            wait_rear = wait_rear + 1
                            ready_rear = ready_rear + 1
                    print  "[", running_process_name, "]", running_processor
                    Turnaround_time[running_process_name] = time-arrival_time[running_process_name]

# case 4:  process is even and burst time is not greater then i/o time

                else:
                    running_processor = running_processor - io_time_slice                                                         # if burst time is greater then i/o time
                    waiting_time[running_process_name] = time - arrival_time[running_process_name]
                    for time in range(time + io_time_slice):
                        time = time + 1

                        if burst < size and arrival_time[burst] == time:                                                            # first check the new process
                            ready_queue[ready_rear] = burst_time[burst]
                            ready_queue_process_name[ready_rear] = process_name[burst]
                            ready_rear = ready_rear + 1
                            burst = burst + 1

                        if waiting_queue_arrival_time[wait_rear] == time:                                           # secondly check the waiting queue
                            ready_queue[ready_rear] = waiting_queue[wait_rear]
                            ready_queue_process_name[ready_rear] = waiting_queue_process_name[wait_rear]
                            wait_rear = wait_rear + 1
                            ready_rear = ready_rear + 1

                    ready_queue[ready_rear] = running_processor
                    ready_queue_process_name[ready_rear] = running_process_name

                    print  "[", running_process_name, "]", running_processor

                    ready_rear = ready_rear + 1
                    wait_front = wait_front + 1

                    waiting_queue_arrival_time = time + io_waiting_time
                    waiting_queue[wait_front] = running_processor
                    waiting_queue_process_name[wait_front] = running_process_name

        for loop3 in range (size-1):
            total_turnaround_time+=Turnaround_time[loop3]
            total_waiting_time+=waiting_time[loop3]

        average_waiting_time=total_waiting_time/size
        average_turnaround_time=total_turnaround_time/size

        print "Average Turnaround time : ", average_turnaround_time
        print "Average Waiting time : ", average_waiting_time


else:
    print "sorry !.. you have not select any process "
